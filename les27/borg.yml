- name: BORG | Install and configure BORG
  hosts: all
  become: true
  tasks:
  - name: update
    apt: 
      update_cache=yes

  - name: BORG | Install BORG
    apt:
      name: borgbackup
      state: latest

- name: Backup
  hosts: backup
  become: true
  tasks:
  - name: Create user borg
    ansible.builtin.user:
      name: borg
      shell: /bin/bash
  - name: Change file ownership, group and permissions
    ansible.builtin.file:
      path: /var/backup
      owner: borg
      group: borg
      state: directory
      recurse: yes
  - name: Create a directory .ssh
    ansible.builtin.file:
      path: /home/borg/.ssh
      state: directory
      owner: borg
      group: borg
      mode: '0700'
  - name: Create a directory .ssh/authorized_keys
    ansible.builtin.file:
      path: /home/borg/.ssh/authorized_keys
      state: touch
      mode: '0600'
      owner: borg
      group: borg

- name: Client
  hosts: client
  become: yes  
  tasks:
    - name: Create or update user and generate SSH key
      ansible.builtin.user:
        name: root
        generate_ssh_key: yes
    - name: Read authorized_keys file
      ansible.builtin.slurp:
        src: /root/.ssh/id_rsa.pub 
      register: authorized_keys_content

    - name: Add host fingerprint to known_hosts
      ansible.builtin.known_hosts:
        host: 192.168.56.160
        key: "{{ lookup('pipe', 'ssh-keyscan -H 192.168.56.160') }}"
        state: present
        path: ~/.ssh/known_hosts

- name: Backup
  hosts: backup
  become: true
  tasks:
  - name: Set authorized key to user borg
    ansible.posix.authorized_key:
      user: borg
      state: present
      key: "{{ hostvars['client']['authorized_keys_content']['content'] | b64decode }}"
  - name: Check if file exists
    ansible.builtin.stat:
      path: /var/backup/client/config
    register: backup_config

- name: Client
  hosts: client
  become: yes
  tasks:
  - name: Initialize Borg repository
    ansible.builtin.shell: borg init --encryption=repokey borg@192.168.56.160:/var/backup/client
    environment:
      BORG_PASSPHRASE: "Test1234"
    when: not hostvars['backup'].backup_config.stat.exists  
  - name: Copy files service and timer
    ansible.builtin.copy:
      src: templates/
      dest: /etc/systemd/system/
      owner: root
      group: root
      mode: '0755'
  - name: Enable a timer unit for borg-backup.timer
    ansible.builtin.systemd_service:
      name: borg-backup.timer
      state: started
      enabled: true      
      